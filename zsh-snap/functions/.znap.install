#!/bin/zsh
# install executables & completion functions
# args: <repo> ...
emulate -L zsh; setopt $_znap_opts
zmodload -Fa zsh/files b:zf_ln b:zf_mkdir

if (( $# < 1 )); then
  print -u2 'znap install: not enough arguments'
  .znap.help install
  return $(( sysexits[(i)USAGE] + 63 ))
fi

.znap.clone $@ ||
    return

local REPLY=
private -a bindir=( ~/.local/bin ) datadir=( ${XDG_DATA_HOME:-~/.local/share}/zsh/site-functions )
private -a link=() orig=()
private pat= repo= sub=
mkdir -pm 0700 $bindir $datadir
for repo in $@; do
  repo=~[$repo]

  orig=( $repo/{,bin/}*(-*) )
  while (( $#orig )); do
    link=( $bindir/$orig[1]:t )
    if [[ $link[1]:A != $orig[1] ]]; then
      hash $orig[1]:t=$link[1]
      if zf_ln -fhs "$orig[1]" "$link[1]"; then
        print -Pr -- "%F{14}${(D)link[1]}%f -> %F{10}${(D)orig[1]}%f"
      else
        return $(( sysexits[(i)CANTCREAT] + 63 ))
      fi
    fi
    shift orig
  done

  pat="$repo/**/_*~*.zwc(-.)"
  sub="$( git -C $repo submodule foreach --quiet pwd )"
  [[ -n $sub ]] &&
      pat+="~(${(j:|:)${(f)sub}})/*"
  orig=( $~pat )
  while (( $#orig )); do
    link=( $datadir/$orig[1]:t )
    if [[ $link[1]:A != $orig[1] ]]; then
      IFS='' read -r < $orig[1]
      if [[ $REPLY == \#(autoload|compdef)\ * ]]; then
        if zf_ln -fhs "$orig[1]" "$link[1]"; then
          print -Pr -- "%F{14}${(D)link[1]}%f -> %F{10}${(D)orig[1]}%f"
          if emulate zsh -c "zcompile -UzM ${(q)orig[1]}"; then
            zf_ln -fhs $orig[1].zwc $link[1].zwc
            ..znap.chmod 640 $orig[1].zwc $link[1].zwc
          fi
        else
          return $(( sysexits[(i)CANTCREAT] + 63 ))
        fi
      fi
    fi
    shift orig
  done
done

hash -f
[[ -f $_comp_dumpfile ]] &&
    zf_rm -f $_comp_dumpfile

true
