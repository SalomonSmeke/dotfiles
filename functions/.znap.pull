#!/bin/zsh
# update repos in parallel
# args: [ <repo> ... ]
zmodload -F zsh/files b:zf_ln b:zf_rm
autoload +X -Uz is-at-least

.znap.pull() {
  emulate -L zsh; setopt $_znap_opts

  private -a repos=( ~znap/$^@(D-/) )
  (( ${#repos} )) ||
      repos=( ~znap/*(D-/) )

  if is-at-least 2.31 ${${=$( git --version )}[3]}; then
    local r
    for r in $repos; do
      if zstyle -T :znap:pull:${r:t} git-maintenance; then
        git -C $r maintenance start --quiet
      else
        git -C $r maintenance unregister --quiet
      fi
    done
  fi

  is-at-least 2.8 ${${=$( git --version )}[3]} &&
      local jopt=-j0
  .znap.multi '.znap.pull.task '${(i)^repos}
  print -n '\r'
}

.znap.pull.task() {
  emulate -L zsh; setopt $_znap_opts

  cd -q $1

  .znap.ignore $1:t '*.zwc'  # Add `*.zwc` to repo's local ignore list.

  private -a upstream=( ${(s:/:)$( git rev-parse -q --abbrev-ref @{u} 2> /dev/null )} )
  git fetch -t $jopt --recurse-submodules $upstream[@] &> /dev/null ||
      return

  print -n .

  private -a count=()
  if git diff --quiet &&
      count=( ${="$( git rev-list --count --left-right @{u}...@ 2> /dev/null )"} ) &&
      (( count[1] && ! count[2] )); then

    cd -q ~znap
    print -nr -- $'\r'"${$( eval "ls -d $1:t" )%[/@]} "
    cd -q $1

    ..znap.tput el  # Clear to end of line.

    private msg=
    msg="$(
        git pull -q -r $jopt --autostash --recurse-submodules $upstream[@] 2>&1 > /dev/null
    )"
    private err=$?

    print -n '\r'
    .znap.status $1:t
    if (( err )); then
      print $msg
    else
      private cache_dir=$XDG_CACHE_HOME/zsh-snap
      zf_rm -f -- $_comp_dumpfile $cache_dir/fpath/_$1:t $cache_dir/eval/${1:t}.zsh
      .znap.compile $1

      private -a bugs=(
        ~/.local/bin/*.zwc.zwc ${XDG_DATA_HOME:-~/.local/share}/zsh/site-functions/*.zwc.zwc
      )
      (( $#bugs[@] )) &&
          zf_rm $bugs[@]

      private link= orig= opt=
      for link in ~/.local/bin/*~*.zwc(@) \
          ${XDG_DATA_HOME:-~/.local/share}/zsh/site-functions/*~*.zwc(@); do
        orig=$link:P
        if [[ $orig == $1/* ]]; then
          if [[ $orig == ~/.local/bin/* ]]; then
            opt=R
          else
            opt=zM
          fi
          if emulate zsh -c "zcompile -U$opt ${(q)orig}"; then
            zf_ln -fhs $orig.zwc $link.zwc
            ..znap.chmod 640 $orig.zwc $link.zwc
          fi
        fi
      done
    fi
  fi
}

.znap.pull "$@"
